library identifier: "pipeline-library@master",
retriever: modernSCM(
  [
    $class: "GitSCMSource",
    remote: "https://github.com/redhat-cop/pipeline-library.git"
  ]
)

openshift.withCluster() {
  env.POM_FILE = env.BUILD_CONTEXT_DIR ? "${env.BUILD_CONTEXT_DIR}/pom.xml" : "pom.xml"
  env.TARGET = env.BUILD_CONTEXT_DIR ? "${env.BUILD_CONTEXT_DIR}/target" : "target"
  env.APP_NAME = "${APP_NAME}"
  env.NEXUS_REPO = "${NEXUS_REPO}"
  env.HELM_CHART = "${HELM_CHART}"
  env.APP_DEV_NAMESPACE = "${APP_DEV_NAMESPACE}"
  env.BUILD = openshift.project()
  env.DEV = "${APP_NAME}-dev"
  env.STAGE = "${APP_NAME}-stage"
  env.PROD = "${APP_NAME}-prod"
  echo "Starting Pipeline for ${APP_NAME}..."
}


pipeline {
  agent { label 'maven' }
  environment { 
      mvnCmd = "mvn -s ./nexus_settings.xml"
  }
  stages {
	  // Checkout Source Code.
	  stage('Checkout Source') {
	    steps {
          git url: "${APPLICATION_SOURCE_REPO}", branch: "${APPLICATION_SOURCE_REF}"
      }
	  }

	  // Build the Tasks Application in the directory 'openshift-tasks'
	  stage('Build war') {
      steps {
        sh "mvn -B clean install -DskipTests=true -f ${POM_FILE}"
      }
	  }

	  // Using Maven run the unit tests
	  stage('Unit Tests') {
      steps {
        sh "mvn -B test -f ${POM_FILE}"
      }
	  }
	  // Using Maven call SonarQube for Code Analysis
	  stage('Code Analysis') {

      steps {
        //, credentialsId: 'sonar'
        withSonarQubeEnv(installationName: 'sonar') {
          sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.6.0.1398:sonar -f ${POM_FILE}'
        }
	    }
	  }

	  // Using Build Image
	  stage('Build Image') {
      steps {
        sh """
          ls ${TARGET}/*
          rm -rf oc-build && mkdir -p oc-build/deployments
          for t in \$(echo "jar;war;ear" | tr ";" "\\n"); do
            cp -rfv ./${TARGET}/*.\$t oc-build/deployments/ 2> /dev/null || echo "No \$t files"
          done
        """
        binaryBuild(projectName: env.BUILD, buildConfigName: env.APP_NAME, buildFromPath: "oc-build")

      }        

	  }
	  stage('Scan Image') {
      steps {
        echo "Scanning Image using Anchore Scanner"
        script {
          def imageLine = "${env.NEXUS_REPO}/tssc/${env.APP_NAME}:latest"
          writeFile file: 'anchore_images', text: imageLine
          anchore engineCredentialsId: 'anchore-creds', name: 'anchore_images', engineurl: 'http://anchore-engine-api:8228/v1'
        }
      }
    }

    stage('Deploy to Dev') {
      agent {
        label 'helm-agent'
      }
      steps {
        echo "Deploying ${env.APP_NAME} to OCP Project: ${env.APP_DEV_NAMESPACE}"
        git url: "${APPLICATION_SOURCE_REPO}", branch: "${APPLICATION_SOURCE_REF}"
        script {
          sh """
            ls -lrt 
            pwd
            curl -k --output deployments.tgz ${env.HELM_CHART}
            helm template v1 --values=./.helm/dev_deploy.yml deployments.tgz --set app_name=${APP_NAME} --set namespace=${APP_DEV_NAMESPACE} | oc apply -f- 
          """
        }
      }
    }

  }
}